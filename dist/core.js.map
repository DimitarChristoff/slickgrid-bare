{"version":3,"sources":["webpack:///core.js","webpack:///webpack/bootstrap f2feed043c0cf6cca57c?c689***","webpack:///./src/slick.core.js?591b***"],"names":["module","exports","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","EventData","isPropagationStopped","isImmediatePropagationStopped","this","stopPropagation","stopImmediatePropagation","Event","handlers","subscribe","fn","push","unsubscribe","i","length","splice","notify","args","e","scope","returnValue","EventHandler","event","handler","unsubscribeAll","Range","fromRow","fromCell","toRow","toCell","undefined","Math","min","max","isSingleRow","isSingleCell","contains","row","cell","toString","NonDataItem","__nonDataRow","Group","__group","level","count","value","title","collapsed","totals","rows","groups","groupingKey","GroupTotals","__groupTotals","group","initialized","EditorLock","activeEditController","isActive","editController","activate","commitCurrentEdit","cancelCurrentEdit","deactivate","TreeColumns","treeColumns","init","mapToId","columns","forEach","column","columnsById","filter","node","condition","valid","sort","grid","a","b","indexA","getOrDefault","getColumnIndex","indexB","getDepth","getColumnsInDepth","depth","current","n","extractColumns","concat","result","hasOwnProperty","cloneTreeColumns","$","extend","hasDepth","getTreeColumns","getColumnsInGroup","visibleColumns","visible","reOrder","getById","getInIds","ids","map","Object","defineProperty","Slick","NonDataRow","GlobalEditorLock","keyCode","BACKSPACE","DELETE","DOWN","END","ENTER","ESCAPE","HOME","INSERT","LEFT","PAGE_DOWN","PAGE_UP","RIGHT","TAB","UP","SPACE","default","prototype","equals"],"mappings":"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","file":"core.js","sourcesContent":["module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/** *\n\t * Contains core SlickGrid classes.\n\t * @module Core\n\t * @namespace Slick\n\t */\n\tvar Slick = {\n\t  Event: Event,\n\t  EventData: EventData,\n\t  EventHandler: EventHandler,\n\t  Range: Range,\n\t  NonDataRow: NonDataItem,\n\t  Group: Group,\n\t  GroupTotals: GroupTotals,\n\t  EditorLock: EditorLock,\n\t  /** *\n\t   * A global singleton editor lock.\n\t   * @class GlobalEditorLock\n\t   * @static\n\t   * @constructor\n\t   */\n\t  GlobalEditorLock: new EditorLock(),\n\t  TreeColumns: TreeColumns,\n\t\n\t  keyCode: {\n\t    BACKSPACE: 8,\n\t    DELETE: 46,\n\t    DOWN: 40,\n\t    END: 35,\n\t    ENTER: 13,\n\t    ESCAPE: 27,\n\t    HOME: 36,\n\t    INSERT: 45,\n\t    LEFT: 37,\n\t    PAGE_DOWN: 34,\n\t    PAGE_UP: 33,\n\t    RIGHT: 39,\n\t    TAB: 9,\n\t    UP: 38,\n\t    SPACE: 32\n\t  }\n\t};\n\t\n\texports.default = Slick;\n\t\n\t/***\n\t * An event object for passing data to event handlers and letting them control propagation.\n\t * <p>This is pretty much identical to how W3C and jQuery implement events.</p>\n\t * @class EventData\n\t * @constructor\n\t */\n\t\n\tfunction EventData() {\n\t  var isPropagationStopped = false;\n\t  var isImmediatePropagationStopped = false;\n\t\n\t  /***\n\t   * Stops event from propagating up the DOM tree.\n\t   * @method stopPropagation\n\t   */\n\t  this.stopPropagation = function () {\n\t    isPropagationStopped = true;\n\t  };\n\t\n\t  /***\n\t   * Returns whether stopPropagation was called on this event object.\n\t   * @method isPropagationStopped\n\t   * @return {Boolean}\n\t   */\n\t  this.isPropagationStopped = function () {\n\t    return isPropagationStopped;\n\t  };\n\t\n\t  /***\n\t   * Prevents the rest of the handlers from being executed.\n\t   * @method stopImmediatePropagation\n\t   */\n\t  this.stopImmediatePropagation = function () {\n\t    isImmediatePropagationStopped = true;\n\t  };\n\t\n\t  /***\n\t   * Returns whether stopImmediatePropagation was called on this event object.\\\n\t   * @method isImmediatePropagationStopped\n\t   * @return {Boolean}\n\t   */\n\t  this.isImmediatePropagationStopped = function () {\n\t    return isImmediatePropagationStopped;\n\t  };\n\t}\n\t\n\t/***\n\t * A simple publisher-subscriber implementation.\n\t * @class Event\n\t * @constructor\n\t */\n\tfunction Event() {\n\t  var handlers = [];\n\t\n\t  /***\n\t   * Adds an event handler to be called when the event is fired.\n\t   * <p>Event handler will receive two arguments - an <code>EventData</code> and the <code>data</code>\n\t   * object the event was fired with.<p>\n\t   * @method subscribe\n\t   * @param fn {Function} Event handler.\n\t   */\n\t  this.subscribe = function (fn) {\n\t    handlers.push(fn);\n\t  };\n\t\n\t  /***\n\t   * Removes an event handler added with <code>subscribe(fn)</code>.\n\t   * @method unsubscribe\n\t   * @param fn {Function} Event handler to be removed.\n\t   */\n\t  this.unsubscribe = function (fn) {\n\t    for (var i = handlers.length - 1; i >= 0; i--) {\n\t      if (handlers[i] === fn) {\n\t        handlers.splice(i, 1);\n\t      }\n\t    }\n\t  };\n\t\n\t  /***\n\t   * Fires an event notifying all subscribers.\n\t   * @method notify\n\t   * @param args {Object} Additional data object to be passed to all handlers.\n\t   * @param e {EventData}\n\t   *      Optional.\n\t   *      An <code>EventData</code> object to be passed to all handlers.\n\t   *      For DOM events, an existing W3C/jQuery event object can be passed in.\n\t   * @param scope {Object}\n\t   *      Optional.\n\t   *      The scope (\"this\") within which the handler will be executed.\n\t   *      If not specified, the scope will be set to the <code>Event</code> instance.\n\t   */\n\t  this.notify = function (args, e, scope) {\n\t    e = e || new EventData();\n\t    scope = scope || this;\n\t\n\t    var returnValue;\n\t    for (var i = 0; i < handlers.length && !(e.isPropagationStopped() || e.isImmediatePropagationStopped()); i++) {\n\t      returnValue = handlers[i].call(scope, e, args);\n\t    }\n\t\n\t    return returnValue;\n\t  };\n\t}\n\t\n\tfunction EventHandler() {\n\t  var handlers = [];\n\t\n\t  this.subscribe = function (event, handler) {\n\t    handlers.push({\n\t      event: event,\n\t      handler: handler\n\t    });\n\t    event.subscribe(handler);\n\t\n\t    return this; // allow chaining\n\t  };\n\t\n\t  this.unsubscribe = function (event, handler) {\n\t    var i = handlers.length;\n\t    while (i--) {\n\t      if (handlers[i].event === event && handlers[i].handler === handler) {\n\t        handlers.splice(i, 1);\n\t        event.unsubscribe(handler);\n\t        return;\n\t      }\n\t    }\n\t\n\t    return this; // allow chaining\n\t  };\n\t\n\t  this.unsubscribeAll = function () {\n\t    var i = handlers.length;\n\t    while (i--) {\n\t      handlers[i].event.unsubscribe(handlers[i].handler);\n\t    }\n\t    handlers = [];\n\t\n\t    return this; // allow chaining\n\t  };\n\t}\n\t\n\t/***\n\t * A structure containing a range of cells.\n\t * @class Range\n\t * @constructor\n\t * @param fromRow {Integer} Starting row.\n\t * @param fromCell {Integer} Starting cell.\n\t * @param toRow {Integer} Optional. Ending row. Defaults to <code>fromRow</code>.\n\t * @param toCell {Integer} Optional. Ending cell. Defaults to <code>fromCell</code>.\n\t */\n\tfunction Range(fromRow, fromCell, toRow, toCell) {\n\t  if (toRow === undefined && toCell === undefined) {\n\t    toRow = fromRow;\n\t    toCell = fromCell;\n\t  }\n\t\n\t  /***\n\t   * @property fromRow\n\t   * @type {Integer}\n\t   */\n\t  this.fromRow = Math.min(fromRow, toRow);\n\t\n\t  /***\n\t   * @property fromCell\n\t   * @type {Integer}\n\t   */\n\t  this.fromCell = Math.min(fromCell, toCell);\n\t\n\t  /***\n\t   * @property toRow\n\t   * @type {Integer}\n\t   */\n\t  this.toRow = Math.max(fromRow, toRow);\n\t\n\t  /***\n\t   * @property toCell\n\t   * @type {Integer}\n\t   */\n\t  this.toCell = Math.max(fromCell, toCell);\n\t\n\t  /***\n\t   * Returns whether a range represents a single row.\n\t   * @method isSingleRow\n\t   * @return {Boolean}\n\t   */\n\t  this.isSingleRow = function () {\n\t    return this.fromRow == this.toRow;\n\t  };\n\t\n\t  /***\n\t   * Returns whether a range represents a single cell.\n\t   * @method isSingleCell\n\t   * @return {Boolean}\n\t   */\n\t  this.isSingleCell = function () {\n\t    return this.fromRow == this.toRow && this.fromCell == this.toCell;\n\t  };\n\t\n\t  /***\n\t   * Returns whether a range contains a given cell.\n\t   * @method contains\n\t   * @param row {Integer}\n\t   * @param cell {Integer}\n\t   * @return {Boolean}\n\t   */\n\t  this.contains = function (row, cell) {\n\t    return row >= this.fromRow && row <= this.toRow && cell >= this.fromCell && cell <= this.toCell;\n\t  };\n\t\n\t  /***\n\t   * Returns a readable representation of a range.\n\t   * @method toString\n\t   * @return {String}\n\t   */\n\t  this.toString = function () {\n\t    if (this.isSingleCell()) {\n\t      return '(' + this.fromRow + ':' + this.fromCell + ')';\n\t    } else {\n\t      return '(' + this.fromRow + ':' + this.fromCell + ' - ' + this.toRow + ':' + this.toCell + ')';\n\t    }\n\t  };\n\t}\n\t\n\t/***\n\t * A base class that all special / non-data rows (like Group and GroupTotals) derive from.\n\t * @class NonDataItem\n\t * @constructor\n\t */\n\tfunction NonDataItem() {\n\t  this.__nonDataRow = true;\n\t}\n\t\n\t/***\n\t * Information about a group of rows.\n\t * @class Group\n\t * @extends Slick.NonDataItem\n\t * @constructor\n\t */\n\tfunction Group() {\n\t  this.__group = true;\n\t\n\t  /**\n\t   * Grouping level, starting with 0.\n\t   * @property level\n\t   * @type {Number}\n\t   */\n\t  this.level = 0;\n\t\n\t  /***\n\t   * Number of rows in the group.\n\t   * @property count\n\t   * @type {Integer}\n\t   */\n\t  this.count = 0;\n\t\n\t  /***\n\t   * Grouping value.\n\t   * @property value\n\t   * @type {Object}\n\t   */\n\t  this.value = null;\n\t\n\t  /***\n\t   * Formatted display value of the group.\n\t   * @property title\n\t   * @type {String}\n\t   */\n\t  this.title = null;\n\t\n\t  /***\n\t   * Whether a group is collapsed.\n\t   * @property collapsed\n\t   * @type {Boolean}\n\t   */\n\t  this.collapsed = false;\n\t\n\t  /***\n\t   * GroupTotals, if any.\n\t   * @property totals\n\t   * @type {GroupTotals}\n\t   */\n\t  this.totals = null;\n\t\n\t  /**\n\t   * Rows that are part of the group.\n\t   * @property rows\n\t   * @type {Array}\n\t   */\n\t  this.rows = [];\n\t\n\t  /**\n\t   * Sub-groups that are part of the group.\n\t   * @property groups\n\t   * @type {Array}\n\t   */\n\t  this.groups = null;\n\t\n\t  /**\n\t   * A unique key used to identify the group.  This key can be used in calls to DataView\n\t   * collapseGroup() or expandGroup().\n\t   * @property groupingKey\n\t   * @type {Object}\n\t   */\n\t  this.groupingKey = null;\n\t}\n\t\n\tGroup.prototype = new NonDataItem();\n\t\n\t/***\n\t * Compares two Group instances.\n\t * @method equals\n\t * @return {Boolean}\n\t * @param group {Group} Group instance to compare to.\n\t */\n\tGroup.prototype.equals = function (group) {\n\t  return this.value === group.value && this.count === group.count && this.collapsed === group.collapsed && this.title === group.title;\n\t};\n\t\n\t/***\n\t * Information about group totals.\n\t * An instance of GroupTotals will be created for each totals row and passed to the aggregators\n\t * so that they can store arbitrary data in it.  That data can later be accessed by group totals\n\t * formatters during the display.\n\t * @class GroupTotals\n\t * @extends Slick.NonDataItem\n\t * @constructor\n\t */\n\tfunction GroupTotals() {\n\t  this.__groupTotals = true;\n\t\n\t  /***\n\t   * Parent Group.\n\t   * @param group\n\t   * @type {Group}\n\t   */\n\t  this.group = null;\n\t\n\t  /***\n\t   * Whether the totals have been fully initialized / calculated.\n\t   * Will be set to false for lazy-calculated group totals.\n\t   * @param initialized\n\t   * @type {Boolean}\n\t   */\n\t  this.initialized = false;\n\t}\n\t\n\tGroupTotals.prototype = new NonDataItem();\n\t\n\t/***\n\t * A locking helper to track the active edit controller and ensure that only a single controller\n\t * can be active at a time.  This prevents a whole class of state and validation synchronization\n\t * issues.  An edit controller (such as SlickGrid) can query if an active edit is in progress\n\t * and attempt a commit or cancel before proceeding.\n\t * @class EditorLock\n\t * @constructor\n\t */\n\tfunction EditorLock() {\n\t  var activeEditController = null;\n\t\n\t  /***\n\t   * Returns true if a specified edit controller is active (has the edit lock).\n\t   * If the parameter is not specified, returns true if any edit controller is active.\n\t   * @method isActive\n\t   * @param editController {EditController}\n\t   * @return {Boolean}\n\t   */\n\t  this.isActive = function (editController) {\n\t    return editController ? activeEditController === editController : activeEditController !== null;\n\t  };\n\t\n\t  /***\n\t   * Sets the specified edit controller as the active edit controller (acquire edit lock).\n\t   * If another edit controller is already active, and exception will be thrown.\n\t   * @method activate\n\t   * @param editController {EditController} edit controller acquiring the lock\n\t   */\n\t  this.activate = function (editController) {\n\t    if (editController === activeEditController) {\n\t      // already activated?\n\t      return;\n\t    }\n\t    if (activeEditController !== null) {\n\t      throw \"SlickGrid.EditorLock.activate: an editController is still active, can't activate another editController\";\n\t    }\n\t    if (!editController.commitCurrentEdit) {\n\t      throw 'SlickGrid.EditorLock.activate: editController must implement .commitCurrentEdit()';\n\t    }\n\t    if (!editController.cancelCurrentEdit) {\n\t      throw 'SlickGrid.EditorLock.activate: editController must implement .cancelCurrentEdit()';\n\t    }\n\t    activeEditController = editController;\n\t  };\n\t\n\t  /***\n\t   * Unsets the specified edit controller as the active edit controller (release edit lock).\n\t   * If the specified edit controller is not the active one, an exception will be thrown.\n\t   * @method deactivate\n\t   * @param editController {EditController} edit controller releasing the lock\n\t   */\n\t  this.deactivate = function (editController) {\n\t    if (activeEditController !== editController) {\n\t      throw 'SlickGrid.EditorLock.deactivate: specified editController is not the currently active one';\n\t    }\n\t    activeEditController = null;\n\t  };\n\t\n\t  /***\n\t   * Attempts to commit the current edit by calling \"commitCurrentEdit\" method on the active edit\n\t   * controller and returns whether the commit attempt was successful (commit may fail due to validation\n\t   * errors, etc.).  Edit controller's \"commitCurrentEdit\" must return true if the commit has succeeded\n\t   * and false otherwise.  If no edit controller is active, returns true.\n\t   * @method commitCurrentEdit\n\t   * @return {Boolean}\n\t   */\n\t  this.commitCurrentEdit = function () {\n\t    return activeEditController ? activeEditController.commitCurrentEdit() : true;\n\t  };\n\t\n\t  /***\n\t   * Attempts to cancel the current edit by calling \"cancelCurrentEdit\" method on the active edit\n\t   * controller and returns whether the edit was successfully cancelled.  If no edit controller is\n\t   * active, returns true.\n\t   * @method cancelCurrentEdit\n\t   * @return {Boolean}\n\t   */\n\t  this.cancelCurrentEdit = function cancelCurrentEdit() {\n\t    return activeEditController ? activeEditController.cancelCurrentEdit() : true;\n\t  };\n\t}\n\t\n\t/**\n\t *\n\t * @param {Array} treeColumns Array com levels of columns\n\t * @returns {{hasDepth: 'hasDepth', getTreeColumns: 'getTreeColumns', extractColumns: 'extractColumns', getDepth: 'getDepth', getColumnsInDepth: 'getColumnsInDepth', getColumnsInGroup: 'getColumnsInGroup', visibleColumns: 'visibleColumns', filter: 'filter', reOrder: reOrder}}\n\t * @constructor\n\t */\n\tfunction TreeColumns(treeColumns) {\n\t  var columnsById = {};\n\t\n\t  function init() {\n\t    mapToId(treeColumns);\n\t  }\n\t\n\t  function mapToId(columns) {\n\t    columns.forEach(function (column) {\n\t      columnsById[column.id] = column;\n\t\n\t      if (column.columns) mapToId(column.columns);\n\t    });\n\t  }\n\t\n\t  function filter(node, condition) {\n\t    return node.filter(function (column) {\n\t      var valid = condition.call(column);\n\t\n\t      if (valid && column.columns) column.columns = filter(column.columns, condition);\n\t\n\t      return valid && (!column.columns || column.columns.length);\n\t    });\n\t  }\n\t\n\t  function sort(columns, grid) {\n\t    columns.sort(function (a, b) {\n\t      var indexA = getOrDefault(grid.getColumnIndex(a.id)),\n\t          indexB = getOrDefault(grid.getColumnIndex(b.id));\n\t\n\t      return indexA - indexB;\n\t    }).forEach(function (column) {\n\t      if (column.columns) sort(column.columns, grid);\n\t    });\n\t  }\n\t\n\t  function getOrDefault(value) {\n\t    return typeof value === 'undefined' ? -1 : value;\n\t  }\n\t\n\t  function getDepth(node) {\n\t    if (node.length) for (var i in node) {\n\t      return getDepth(node[i]);\n\t    } else if (node.columns) return 1 + getDepth(node.columns);else return 1;\n\t  }\n\t\n\t  function getColumnsInDepth(node, depth, current) {\n\t    var columns = [];\n\t    current = current || 0;\n\t\n\t    if (depth == current) {\n\t      if (node.length) node.forEach(function (n) {\n\t        if (n.columns) n.extractColumns = function () {\n\t          return extractColumns(n);\n\t        };\n\t      });\n\t\n\t      return node;\n\t    } else for (var i in node) {\n\t      if (node[i].columns) {\n\t        columns = columns.concat(getColumnsInDepth(node[i].columns, depth, current + 1));\n\t      }\n\t    }return columns;\n\t  }\n\t\n\t  function extractColumns(node) {\n\t    var result = [];\n\t\n\t    if (node.hasOwnProperty('length')) {\n\t      for (var i = 0; i < node.length; i++) {\n\t        result = result.concat(extractColumns(node[i]));\n\t      }\n\t    } else {\n\t      if (node.hasOwnProperty('columns')) result = result.concat(extractColumns(node.columns));else return node;\n\t    }\n\t\n\t    return result;\n\t  }\n\t\n\t  function cloneTreeColumns() {\n\t    return $.extend(true, [], treeColumns);\n\t  }\n\t\n\t  init();\n\t\n\t  this.hasDepth = function () {\n\t    for (var i in treeColumns) {\n\t      if (treeColumns[i].hasOwnProperty('columns')) return true;\n\t    }return false;\n\t  };\n\t\n\t  this.getTreeColumns = function () {\n\t    return treeColumns;\n\t  };\n\t\n\t  this.extractColumns = function () {\n\t    return this.hasDepth() ? extractColumns(treeColumns) : treeColumns;\n\t  };\n\t\n\t  this.getDepth = function () {\n\t    return getDepth(treeColumns);\n\t  };\n\t\n\t  this.getColumnsInDepth = function (depth) {\n\t    return getColumnsInDepth(treeColumns, depth);\n\t  };\n\t\n\t  this.getColumnsInGroup = function (groups) {\n\t    return extractColumns(groups);\n\t  };\n\t\n\t  this.visibleColumns = function () {\n\t    return filter(cloneTreeColumns(), function () {\n\t      return this.visible;\n\t    });\n\t  };\n\t\n\t  this.filter = function (condition) {\n\t    return filter(cloneTreeColumns(), condition);\n\t  };\n\t\n\t  this.reOrder = function (grid) {\n\t    return sort(treeColumns, grid);\n\t  };\n\t\n\t  this.getById = function (id) {\n\t    return columnsById[id];\n\t  };\n\t\n\t  this.getInIds = function (ids) {\n\t    return ids.map(function (id) {\n\t      return columnsById[id];\n\t    });\n\t  };\n\t}\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// core.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f2feed043c0cf6cca57c","/** *\n * Contains core SlickGrid classes.\n * @module Core\n * @namespace Slick\n */\nconst Slick = {\n  Event: Event,\n  EventData: EventData,\n  EventHandler: EventHandler,\n  Range: Range,\n  NonDataRow: NonDataItem,\n  Group: Group,\n  GroupTotals: GroupTotals,\n  EditorLock: EditorLock,\n  /** *\n   * A global singleton editor lock.\n   * @class GlobalEditorLock\n   * @static\n   * @constructor\n   */\n  GlobalEditorLock: new EditorLock(),\n  TreeColumns: TreeColumns,\n\n  keyCode: {\n    BACKSPACE: 8,\n    DELETE: 46,\n    DOWN: 40,\n    END: 35,\n    ENTER: 13,\n    ESCAPE: 27,\n    HOME: 36,\n    INSERT: 45,\n    LEFT: 37,\n    PAGE_DOWN: 34,\n    PAGE_UP: 33,\n    RIGHT: 39,\n    TAB: 9,\n    UP: 38,\n    SPACE: 32\n  }\n};\n\nexport default Slick;\n\n/***\n * An event object for passing data to event handlers and letting them control propagation.\n * <p>This is pretty much identical to how W3C and jQuery implement events.</p>\n * @class EventData\n * @constructor\n */\nfunction EventData() {\n  var isPropagationStopped = false;\n  var isImmediatePropagationStopped = false;\n\n  /***\n   * Stops event from propagating up the DOM tree.\n   * @method stopPropagation\n   */\n  this.stopPropagation = function() {\n    isPropagationStopped = true;\n  };\n\n  /***\n   * Returns whether stopPropagation was called on this event object.\n   * @method isPropagationStopped\n   * @return {Boolean}\n   */\n  this.isPropagationStopped = function() {\n    return isPropagationStopped;\n  };\n\n  /***\n   * Prevents the rest of the handlers from being executed.\n   * @method stopImmediatePropagation\n   */\n  this.stopImmediatePropagation = function() {\n    isImmediatePropagationStopped = true;\n  };\n\n  /***\n   * Returns whether stopImmediatePropagation was called on this event object.\\\n   * @method isImmediatePropagationStopped\n   * @return {Boolean}\n   */\n  this.isImmediatePropagationStopped = function() {\n    return isImmediatePropagationStopped;\n  };\n}\n\n/***\n * A simple publisher-subscriber implementation.\n * @class Event\n * @constructor\n */\nfunction Event() {\n  var handlers = [];\n\n  /***\n   * Adds an event handler to be called when the event is fired.\n   * <p>Event handler will receive two arguments - an <code>EventData</code> and the <code>data</code>\n   * object the event was fired with.<p>\n   * @method subscribe\n   * @param fn {Function} Event handler.\n   */\n  this.subscribe = function(fn) {\n    handlers.push(fn);\n  };\n\n  /***\n   * Removes an event handler added with <code>subscribe(fn)</code>.\n   * @method unsubscribe\n   * @param fn {Function} Event handler to be removed.\n   */\n  this.unsubscribe = function(fn) {\n    for (var i = handlers.length - 1; i >= 0; i--) {\n      if (handlers[i] === fn) {\n        handlers.splice(i, 1);\n      }\n    }\n  };\n\n  /***\n   * Fires an event notifying all subscribers.\n   * @method notify\n   * @param args {Object} Additional data object to be passed to all handlers.\n   * @param e {EventData}\n   *      Optional.\n   *      An <code>EventData</code> object to be passed to all handlers.\n   *      For DOM events, an existing W3C/jQuery event object can be passed in.\n   * @param scope {Object}\n   *      Optional.\n   *      The scope (\"this\") within which the handler will be executed.\n   *      If not specified, the scope will be set to the <code>Event</code> instance.\n   */\n  this.notify = function(args, e, scope) {\n    e = e || new EventData();\n    scope = scope || this;\n\n    var returnValue;\n    for (\n      var i = 0;\n      i < handlers.length &&\n      !(e.isPropagationStopped() || e.isImmediatePropagationStopped());\n      i++\n    ) {\n      returnValue = handlers[i].call(scope, e, args);\n    }\n\n    return returnValue;\n  };\n}\n\nfunction EventHandler() {\n  var handlers = [];\n\n  this.subscribe = function(event, handler) {\n    handlers.push({\n      event: event,\n      handler: handler\n    });\n    event.subscribe(handler);\n\n    return this; // allow chaining\n  };\n\n  this.unsubscribe = function(event, handler) {\n    var i = handlers.length;\n    while (i--) {\n      if (handlers[i].event === event && handlers[i].handler === handler) {\n        handlers.splice(i, 1);\n        event.unsubscribe(handler);\n        return;\n      }\n    }\n\n    return this; // allow chaining\n  };\n\n  this.unsubscribeAll = function() {\n    var i = handlers.length;\n    while (i--) {\n      handlers[i].event.unsubscribe(handlers[i].handler);\n    }\n    handlers = [];\n\n    return this; // allow chaining\n  };\n}\n\n/***\n * A structure containing a range of cells.\n * @class Range\n * @constructor\n * @param fromRow {Integer} Starting row.\n * @param fromCell {Integer} Starting cell.\n * @param toRow {Integer} Optional. Ending row. Defaults to <code>fromRow</code>.\n * @param toCell {Integer} Optional. Ending cell. Defaults to <code>fromCell</code>.\n */\nfunction Range(fromRow, fromCell, toRow, toCell) {\n  if (toRow === undefined && toCell === undefined) {\n    toRow = fromRow;\n    toCell = fromCell;\n  }\n\n  /***\n   * @property fromRow\n   * @type {Integer}\n   */\n  this.fromRow = Math.min(fromRow, toRow);\n\n  /***\n   * @property fromCell\n   * @type {Integer}\n   */\n  this.fromCell = Math.min(fromCell, toCell);\n\n  /***\n   * @property toRow\n   * @type {Integer}\n   */\n  this.toRow = Math.max(fromRow, toRow);\n\n  /***\n   * @property toCell\n   * @type {Integer}\n   */\n  this.toCell = Math.max(fromCell, toCell);\n\n  /***\n   * Returns whether a range represents a single row.\n   * @method isSingleRow\n   * @return {Boolean}\n   */\n  this.isSingleRow = function() {\n    return this.fromRow == this.toRow;\n  };\n\n  /***\n   * Returns whether a range represents a single cell.\n   * @method isSingleCell\n   * @return {Boolean}\n   */\n  this.isSingleCell = function() {\n    return this.fromRow == this.toRow && this.fromCell == this.toCell;\n  };\n\n  /***\n   * Returns whether a range contains a given cell.\n   * @method contains\n   * @param row {Integer}\n   * @param cell {Integer}\n   * @return {Boolean}\n   */\n  this.contains = function(row, cell) {\n    return (\n      row >= this.fromRow &&\n      row <= this.toRow &&\n      cell >= this.fromCell &&\n      cell <= this.toCell\n    );\n  };\n\n  /***\n   * Returns a readable representation of a range.\n   * @method toString\n   * @return {String}\n   */\n  this.toString = function() {\n    if (this.isSingleCell()) {\n      return '(' + this.fromRow + ':' + this.fromCell + ')';\n    } else {\n      return (\n        '(' +\n        this.fromRow +\n        ':' +\n        this.fromCell +\n        ' - ' +\n        this.toRow +\n        ':' +\n        this.toCell +\n        ')'\n      );\n    }\n  };\n}\n\n/***\n * A base class that all special / non-data rows (like Group and GroupTotals) derive from.\n * @class NonDataItem\n * @constructor\n */\nfunction NonDataItem() {\n  this.__nonDataRow = true;\n}\n\n/***\n * Information about a group of rows.\n * @class Group\n * @extends Slick.NonDataItem\n * @constructor\n */\nfunction Group() {\n  this.__group = true;\n\n  /**\n   * Grouping level, starting with 0.\n   * @property level\n   * @type {Number}\n   */\n  this.level = 0;\n\n  /***\n   * Number of rows in the group.\n   * @property count\n   * @type {Integer}\n   */\n  this.count = 0;\n\n  /***\n   * Grouping value.\n   * @property value\n   * @type {Object}\n   */\n  this.value = null;\n\n  /***\n   * Formatted display value of the group.\n   * @property title\n   * @type {String}\n   */\n  this.title = null;\n\n  /***\n   * Whether a group is collapsed.\n   * @property collapsed\n   * @type {Boolean}\n   */\n  this.collapsed = false;\n\n  /***\n   * GroupTotals, if any.\n   * @property totals\n   * @type {GroupTotals}\n   */\n  this.totals = null;\n\n  /**\n   * Rows that are part of the group.\n   * @property rows\n   * @type {Array}\n   */\n  this.rows = [];\n\n  /**\n   * Sub-groups that are part of the group.\n   * @property groups\n   * @type {Array}\n   */\n  this.groups = null;\n\n  /**\n   * A unique key used to identify the group.  This key can be used in calls to DataView\n   * collapseGroup() or expandGroup().\n   * @property groupingKey\n   * @type {Object}\n   */\n  this.groupingKey = null;\n}\n\nGroup.prototype = new NonDataItem();\n\n/***\n * Compares two Group instances.\n * @method equals\n * @return {Boolean}\n * @param group {Group} Group instance to compare to.\n */\nGroup.prototype.equals = function(group) {\n  return (\n    this.value === group.value &&\n    this.count === group.count &&\n    this.collapsed === group.collapsed &&\n    this.title === group.title\n  );\n};\n\n/***\n * Information about group totals.\n * An instance of GroupTotals will be created for each totals row and passed to the aggregators\n * so that they can store arbitrary data in it.  That data can later be accessed by group totals\n * formatters during the display.\n * @class GroupTotals\n * @extends Slick.NonDataItem\n * @constructor\n */\nfunction GroupTotals() {\n  this.__groupTotals = true;\n\n  /***\n   * Parent Group.\n   * @param group\n   * @type {Group}\n   */\n  this.group = null;\n\n  /***\n   * Whether the totals have been fully initialized / calculated.\n   * Will be set to false for lazy-calculated group totals.\n   * @param initialized\n   * @type {Boolean}\n   */\n  this.initialized = false;\n}\n\nGroupTotals.prototype = new NonDataItem();\n\n/***\n * A locking helper to track the active edit controller and ensure that only a single controller\n * can be active at a time.  This prevents a whole class of state and validation synchronization\n * issues.  An edit controller (such as SlickGrid) can query if an active edit is in progress\n * and attempt a commit or cancel before proceeding.\n * @class EditorLock\n * @constructor\n */\nfunction EditorLock() {\n  var activeEditController = null;\n\n  /***\n   * Returns true if a specified edit controller is active (has the edit lock).\n   * If the parameter is not specified, returns true if any edit controller is active.\n   * @method isActive\n   * @param editController {EditController}\n   * @return {Boolean}\n   */\n  this.isActive = function(editController) {\n    return editController\n      ? activeEditController === editController\n      : activeEditController !== null;\n  };\n\n  /***\n   * Sets the specified edit controller as the active edit controller (acquire edit lock).\n   * If another edit controller is already active, and exception will be thrown.\n   * @method activate\n   * @param editController {EditController} edit controller acquiring the lock\n   */\n  this.activate = function(editController) {\n    if (editController === activeEditController) {\n      // already activated?\n      return;\n    }\n    if (activeEditController !== null) {\n      throw \"SlickGrid.EditorLock.activate: an editController is still active, can't activate another editController\";\n    }\n    if (!editController.commitCurrentEdit) {\n      throw 'SlickGrid.EditorLock.activate: editController must implement .commitCurrentEdit()';\n    }\n    if (!editController.cancelCurrentEdit) {\n      throw 'SlickGrid.EditorLock.activate: editController must implement .cancelCurrentEdit()';\n    }\n    activeEditController = editController;\n  };\n\n  /***\n   * Unsets the specified edit controller as the active edit controller (release edit lock).\n   * If the specified edit controller is not the active one, an exception will be thrown.\n   * @method deactivate\n   * @param editController {EditController} edit controller releasing the lock\n   */\n  this.deactivate = function(editController) {\n    if (activeEditController !== editController) {\n      throw 'SlickGrid.EditorLock.deactivate: specified editController is not the currently active one';\n    }\n    activeEditController = null;\n  };\n\n  /***\n   * Attempts to commit the current edit by calling \"commitCurrentEdit\" method on the active edit\n   * controller and returns whether the commit attempt was successful (commit may fail due to validation\n   * errors, etc.).  Edit controller's \"commitCurrentEdit\" must return true if the commit has succeeded\n   * and false otherwise.  If no edit controller is active, returns true.\n   * @method commitCurrentEdit\n   * @return {Boolean}\n   */\n  this.commitCurrentEdit = function() {\n    return activeEditController\n      ? activeEditController.commitCurrentEdit()\n      : true;\n  };\n\n  /***\n   * Attempts to cancel the current edit by calling \"cancelCurrentEdit\" method on the active edit\n   * controller and returns whether the edit was successfully cancelled.  If no edit controller is\n   * active, returns true.\n   * @method cancelCurrentEdit\n   * @return {Boolean}\n   */\n  this.cancelCurrentEdit = function cancelCurrentEdit() {\n    return activeEditController\n      ? activeEditController.cancelCurrentEdit()\n      : true;\n  };\n}\n\n/**\n *\n * @param {Array} treeColumns Array com levels of columns\n * @returns {{hasDepth: 'hasDepth', getTreeColumns: 'getTreeColumns', extractColumns: 'extractColumns', getDepth: 'getDepth', getColumnsInDepth: 'getColumnsInDepth', getColumnsInGroup: 'getColumnsInGroup', visibleColumns: 'visibleColumns', filter: 'filter', reOrder: reOrder}}\n * @constructor\n */\nfunction TreeColumns(treeColumns) {\n  var columnsById = {};\n\n  function init() {\n    mapToId(treeColumns);\n  }\n\n  function mapToId(columns) {\n    columns.forEach(function(column) {\n      columnsById[column.id] = column;\n\n      if (column.columns) mapToId(column.columns);\n    });\n  }\n\n  function filter(node, condition) {\n    return node.filter(function(column) {\n      var valid = condition.call(column);\n\n      if (valid && column.columns)\n        column.columns = filter(column.columns, condition);\n\n      return valid && (!column.columns || column.columns.length);\n    });\n  }\n\n  function sort(columns, grid) {\n    columns\n      .sort(function(a, b) {\n        var indexA = getOrDefault(grid.getColumnIndex(a.id)),\n          indexB = getOrDefault(grid.getColumnIndex(b.id));\n\n        return indexA - indexB;\n      })\n      .forEach(function(column) {\n        if (column.columns) sort(column.columns, grid);\n      });\n  }\n\n  function getOrDefault(value) {\n    return typeof value === 'undefined' ? -1 : value;\n  }\n\n  function getDepth(node) {\n    if (node.length) for (var i in node) return getDepth(node[i]);\n    else if (node.columns) return 1 + getDepth(node.columns);\n    else return 1;\n  }\n\n  function getColumnsInDepth(node, depth, current) {\n    var columns = [];\n    current = current || 0;\n\n    if (depth == current) {\n      if (node.length)\n        node.forEach(function(n) {\n          if (n.columns)\n            n.extractColumns = function() {\n              return extractColumns(n);\n            };\n        });\n\n      return node;\n    } else\n      for (var i in node)\n        if (node[i].columns) {\n          columns = columns.concat(\n            getColumnsInDepth(node[i].columns, depth, current + 1)\n          );\n        }\n\n    return columns;\n  }\n\n  function extractColumns(node) {\n    var result = [];\n\n    if (node.hasOwnProperty('length')) {\n      for (var i = 0; i < node.length; i++)\n        result = result.concat(extractColumns(node[i]));\n    } else {\n      if (node.hasOwnProperty('columns'))\n        result = result.concat(extractColumns(node.columns));\n      else return node;\n    }\n\n    return result;\n  }\n\n  function cloneTreeColumns() {\n    return $.extend(true, [], treeColumns);\n  }\n\n  init();\n\n  this.hasDepth = function() {\n    for (var i in treeColumns)\n      if (treeColumns[i].hasOwnProperty('columns')) return true;\n\n    return false;\n  };\n\n  this.getTreeColumns = function() {\n    return treeColumns;\n  };\n\n  this.extractColumns = function() {\n    return this.hasDepth() ? extractColumns(treeColumns) : treeColumns;\n  };\n\n  this.getDepth = function() {\n    return getDepth(treeColumns);\n  };\n\n  this.getColumnsInDepth = function(depth) {\n    return getColumnsInDepth(treeColumns, depth);\n  };\n\n  this.getColumnsInGroup = function(groups) {\n    return extractColumns(groups);\n  };\n\n  this.visibleColumns = function() {\n    return filter(cloneTreeColumns(), function() {\n      return this.visible;\n    });\n  };\n\n  this.filter = function(condition) {\n    return filter(cloneTreeColumns(), condition);\n  };\n\n  this.reOrder = function(grid) {\n    return sort(treeColumns, grid);\n  };\n\n  this.getById = function(id) {\n    return columnsById[id];\n  };\n\n  this.getInIds = function(ids) {\n    return ids.map(function(id) {\n      return columnsById[id];\n    });\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/slick.core.js"],"sourceRoot":""}